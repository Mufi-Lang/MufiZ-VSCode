{
    "name": "Mufi",
    "scopeName": "source.mufi",
    "fileTypes": [
        "mufi"
    ],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#builtin_functions"
        }
    ],
    "repository": {
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.other.identifier",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash",
                    "match": "//.*"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control",
                    "match": "\\b(?:and|class|else|false|for|if|let|nil|or|print|return|self|super|true|var|while)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type",
                    "match": "\\b(?:integer|double|string)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.double",
                    "match": "\\b[0-9]+\\.[0-9]+\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator",
                    "match": "\\b(?:\\+|-|\\*|/|%|==|!=|<|<=|>|>=|\\+=|-=|\\*=|/=)\\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.definition",
                    "match": "[\\(\\){}\\[\\],;:]"
                }
            ]
        },
        "builtin_functions": {
            "patterns": [
                {
                    "name": "support.function.builtin",
                    "match": "\\b(?:assert|array|linked_list|hash_table|matrix|fvec|range|linspace|slice|splice|push|pop|push_front|pop_front|nth|sort|contains|insert|len|search|is_empty|equal_list|reverse|merge|clone|clear|put|get|remove|set_row|set_col|set|kolasa|rref|rank|transpose|det|lu|workspace|interp1|sum|mean|std|vari|maxl|minl|dot|cross|norm|angle|proj|reflect|reject|refract|what_is|input|double|int|str|ln|log2|log10|pi|sin|cos|tan|asin|acos|atan|complex|abs|phase|sfc|rand|randn|pow|sqrt|ceil|floor|round|max|min|create_file|read_file|write_file|delete_file|create_dir|delete_dir|now|now_ns|now_ms|get_req|post_req|put_req|del_req|open)\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function",
                    "begin": "\\bfun\\s+",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control"
                        }
                    },
                    "end": "\\{",
                    "patterns": [
                        {
                            "name": "entity.name.function",
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                        },
                        {
                            "include": "#parameters"
                        }
                    ]
                },
                {
                    "name": "meta.function.parameters",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "variable.other.identifier",
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                        }
                    ]
                }
            ]
        }
    }
}